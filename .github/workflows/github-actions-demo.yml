# This workflow will build and push a new container image to HuaweiCloud SWR,
# and then will deploy a new task to HuaweiCloud CCI By DevStar, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:

name: Deploy to HuaweiCloud CCI(Cloud Container Instance)

on:
  push:
    branches:
      - cci-workflow
      
env:
  REGION_ID: cn-north-4                   # set this to your preferred huaweicloud region, e.g. cn-north-4
  ACCESS_KEY_ID: ${{ secrets.ACCESSKEY }}             # set this to your huaweicloud access-key-id
  ACCESS_KEY_SECRET: ${{ secrets.SECRETACCESSKEY }}               # set this to your huaweicloud access-key-secret
  SWR_ORGANIZATION:  hcloudcli   # set this to your huaweicloud SWR organization
  IMAGE_NAME: ccidemo # set this to your image name

      
jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Build with Maven
        id: build-project
        run: mvn package -Dmaven.test.skip=true -U -e -X -B
      
      - name: Log in to HuaweiCloud SWR
        uses: huaweicloud/swr-login@v1
        with:
          region: ${{ env.REGION_ID }} # example: cn-north-4
          access-key-id: ${{ env.ACCESS_KEY_ID }}
          access-key-secret: ${{ env.ACCESS_KEY_SECRET }}

      - name: Build, tag, and push image to HuaweiCloud SWR
        id: build-image
        env:
          SWR_REGISTRY: swr.${{ env.REGION_ID }}.myhuaweicloud.com
          SWR_ORGANIZATION: ${{ env.SWR_ORGANIZATION }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          # Build a docker container and
          # push it to SWR so that it can
          docker build -t $SWR_REGISTRY/$SWR_ORGANIZATION/$IMAGE_NAME:$IMAGE_TAG .
          docker push $SWR_REGISTRY/$SWR_ORGANIZATION/$IMAGE_NAME:$IMAGE_TAG
          echo "::set-output name=image::$SWR_REGISTRY/$SWR_ORGANIZATION/$IMAGE_NAME:$IMAGE_TAG"
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
   
    steps:
      - name: Deploy to HuaweiCloud CCI By DevStar
        id: deploy-to-cci-by-devstar
        #uses: azure/webapps-deploy@v2
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          chmod +x kubectl
          mv ./kubectl /usr/local/bin
          kubectl version --client=true
          curl -LO "https://cci-iam-authenticator.obs.cn-north-4.myhuaweicloud.com/latest/linux-amd64/cci-iam-authenticator"
          chmod +x ./cci-iam-authenticator
          mv ./cci-iam-authenticator /usr/local/bin
          cci-iam-authenticator generate-kubeconfig --cci-endpoint=https://cci.cn-north-4.myhuaweicloud.com --ak=${{ env.ACCESS_KEY_ID }} --sk=${{ secrets.SECRETACCESSKEY }}
          kubectl set image deploy cci-deployment-20223141 container-0=${{needs.build.outputs.image}} -n cci-namespace-70395701
